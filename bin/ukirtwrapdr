#!/usr/bin/env starperl

=head1 NAME

ukirtwrapdr - reduce raw UKIRT files in a manner compatible with CADC

=cut

use strict;
use warnings;

use Data::Dumper;
use File::Spec;
use File::Temp qw/tempdir/;
use Getopt::Long qw/GetOptionsFromString/;

use JSA::Convert qw/convert_dr_files/;
use JSA::Files qw/compare_file_lists scan_dir/;
use JSA::Headers qw/get_orac_instrument read_headers/;
use JSA::Logging qw/log_message log_warning/;
use JSA::Starlink qw/check_star_env/;
use JSA::WrapDR qw/prepare_environment prepare_environment_cadc
                   retrieve_data determine_instrument
                   capture_products
                   clean_directory_final clean_directory_pre_capture/;
use UKIRT::Archive qw/convert_ukirt_products
                      match_observation_numbers
                      ukirt_filename_is_archival/;
use UKIRT::Archive::WrapDR qw/combine_pipeline_logs run_ukirt_pipeline/;

print "Debugging information:\n*** ARGV:\n";
print Dumper \@ARGV;
print "*** ENV:\n";
print Dumper \%ENV;


# Read command line options.

my ($id, $inputs, $drparameters, $parameters, $persist, $keep);
my $obs_cal = ''; # Default: no observation to be treated specially.
my $obs_std = ''; # Default: no observation to be treated specially.

# Options to allow for easier testing.

my ($reduced_dir, $abort_after_dr, $abort_after_cv);

GetOptions(
    'id=s'           => \$id,
    'inputs=s'       => \$inputs,

    'drparameters=s' => \$drparameters,
    'parameters=s'   => \$parameters,

    'persist'        => \$persist,
    'keep'           => \$keep,
    'obscal=s'       => \$obs_cal,
    'obsstd=s'       => \$obs_std,

    # For testing:
    'reduced_dir=s'  => \$reduced_dir,    # Start with reduced products from
                                          # a given directory.
    'abort_after_dr' => \$abort_after_dr,
    'abort_after_cv' => \$abort_after_cv,
);

if (defined $parameters) {
    $parameters =~ s/^\"//;
    $parameters =~ s/\"$//;

    GetOptionsFromString($parameters,
        'drparameters=s' => \$drparameters,
        'obscal=s'       => \$obs_cal,
        'obsstd=s'       => \$obs_std,
    );
}

if (defined $drparameters) {
    $drparameters =~ s/^\s+//;
    $drparameters =~ s/\s+$//;
}

$id = "NONE" unless defined $id;
die 'Inputs file not specified' unless defined $inputs || defined $reduced_dir;


# Prepare environment.

prepare_environment();

check_star_env('ORAC');

my $curdir = File::Spec->rel2abs(File::Spec->curdir);
$inputs = File::Spec->catfile($curdir, $inputs)
    unless (! defined $inputs)
        || File::Spec->file_name_is_absolute($inputs)
        || (File::Spec->canonpath($curdir) eq
            File::Spec->canonpath($ENV{'TMPDIR'}));

prepare_environment_cadc();

print "Environment variables:\n";
for my $env_variable (sort qw/PERL5LIB STARLINK_DIR SMURF_THREADS ORAC_DIR
                              PATH ADAM_USER TMPDIR HDS_SCRATCH/) {
  print "$env_variable: " . (defined($ENV{$env_variable}) ?
                              $ENV{$env_variable}         :
                              "undef" ) . "\n";
}

my (@drfiles, $outdir);

if (defined $reduced_dir) {
    chdir($reduced_dir) or die 'Could not change to specified directory';
}
else {
    $outdir = tempdir('UA_XXXXXXX', DIR => $curdir, CLEANUP => ! $keep);
    chdir($outdir) or die "Could not change directory to '$outdir'";
    log_message("Using temporary output directory '$outdir'\n");
}

my %all_existing_files = scan_dir(qr/.*/);

if (defined $reduced_dir) {
    # When a reduced data directory is given, place all the files
    # in the "@drfiles" list.

    @drfiles = keys %all_existing_files;
}
else {
    # Retrieve raw data.

    my %existing_files = scan_dir();

    retrieve_data($id, $inputs, 0);

    my %post_retrieve = scan_dir();

    # Compare the old list with the new to fet a list of files that
    # should be processed.
    my @files = compare_file_lists(\%existing_files, \%post_retrieve);

    log_message("Processing the following files:\n" . join("\n", @files) . "\n");


    # Keep only those files for which we can read the FITS headers,
    # and determine the name of the instrument.

    my %FITS = read_headers(@files);
    if (keys %FITS == 0) {
        die "Could not open any of the supplied files to read headers: " .
            join(", ", @files);
    } elsif (keys %FITS != @files) {
        log_warning("Some file headers could not be read. " .
                    "Continuing with those that can\n");
        @files = keys %FITS;
    }

    my $oracinst = determine_instrument(\%FITS);


    # Run the ORAC-DR pipeline on the calibrations and then on the
    # science observations.

    my ($files_cal, $files_stdsci) =
            match_observation_numbers(\@files, $obs_cal);
    my ($files_std, $files_sci) =
            match_observation_numbers($files_stdsci, $obs_std);
    my ($log_cal, $log_std, $log_sci);

    if (scalar @$files_cal) {
        $log_cal = run_ukirt_pipeline($oracinst, $outdir, $files_cal,
                                      $drparameters);

        sleep 2; # Ensure the runs produce differently named log files
                 # since the file names are based on the time.
    }

    if (scalar @$files_std) {
        $log_std = run_ukirt_pipeline($oracinst, $outdir, $files_std,
                                      $drparameters);

        sleep 2; # Ensure the runs produce differently named log files
                 # since the file names are based on the time.

        if ((defined $log_cal) and (defined $log_std)) {
            combine_pipeline_logs($log_cal, $log_std);
        }
        else {
            $log_cal = $log_std;
        }
    }

    if (scalar @$files_sci) {
        $log_sci = run_ukirt_pipeline($oracinst, $outdir, $files_sci,
                                     $drparameters);

        if ((defined $log_cal) and (defined $log_sci)) {
            combine_pipeline_logs($log_cal, $log_sci);
        }
    }

    exit(0) if $abort_after_dr;

    # Get a list of the newly created files.

    my %post_process = scan_dir();

    @drfiles = compare_file_lists(\%post_retrieve, \%post_process);
}


# Read all the FITS headers from the reduced files.

my %drhdrs = read_headers(@drfiles);


# Convert data products to FITS.

convert_ukirt_products($id, \%drhdrs);

exit(0) if $abort_after_cv;


unless (defined $reduced_dir) {
    # Clean up the directory and capture data products.

    clean_directory_pre_capture($outdir, \%all_existing_files,
                                \&ukirt_filename_is_archival);

    capture_products($id, $persist, undef, 'UKIRT', 0);

    clean_directory_final($outdir, \%all_existing_files) unless $keep;
}


# Change back to original directory to allow temporary directory
# to be deleted.

chdir($curdir);

exit 0;

__END__

=head1 COPYRIGHT

Copyright (C) 2013-2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut
